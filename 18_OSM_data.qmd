# Import de données 

## `osmdata`
<img src="img/logo_osmdata.png" align="right"  height=140 width=122/>
Le package `osmdata` [@R-osmdata] permet d'extraire des données vectorielles depuis OSM en utilisant l'API [Overpass turbo](https://wiki.openstreetmap.org/wiki/Overpass_turbo).

```{r osmdata}
library(sf)
library(osmdata)
library(sf)
com <- st_read("data/lot.gpkg", layer = "communes", quiet = TRUE)

# Sélection de la commune de Cahors
cahors <- com[com$INSEE_COM == "46042", ]

# Définition d'une bounding box
q <- opq(bbox = st_bbox(st_transform(cahors, 4326)))

# Extraction des restaurants
req <- add_osm_feature(opq = q, key = 'amenity', value = "restaurant")
res <- osmdata_sf(req)

# Réduction du resultats :
# les points composant les polygones sont supprimés
res <- unique_osmdata(res)
```

Le résultat contient une couche de points et une couche de polygones. Cela signifie que certains restaurants (la très grande majorité) sont enregistrés sous forme de points dans OSM et d'autres sous forme de polygones. 
Pour obtenir une couche de points cohérente nous pouvons utiliser les centroïdes des polygones.

```{r osmdata2}
resto_point <- res$osm_points

# extraire les centroïdes des polygones
resto_poly_point <- st_centroid(res$osm_polygons)

# identifier les champs en commun
chps <- intersect(names(resto_point), names(resto_poly_point))

# Union des deux couches
resto <- rbind(resto_point[, chps], resto_poly_point[, chps])
```

**Affichage des résultats**

```{r osmdatadisplay, cache=FALSE}
library(mapview)
mapview(cahors) + mapview(resto)
```

:::{.callout-note}
## Site web d'`osmdata`
[`osmdata`](https://docs.ropensci.org/osmdata/)
:::



## `osmextract`

<img src="img/logo_osmextract.svg" align="right" width="120"/>
Le package `osmextract` [@R-osmextract] permet d'extraire des données depuis une base de données OSM directement. Ce package permet de travailler en local sur des volumes de données très importants et ainsi d'éviter de surcharger un serveur Overpass turbo.

La fonction `oe_get()` permet de télécharger un extrait de la base de données OSM sur une zone particulière et de sélectionner un type d'objet à importer.   
L'argument `place` correspond au nom du fichier **\*.pbf** accessible sur le site [Geofabrik](http://download.geofabrik.de/). L'argument `extra_tag` permet de sélectionner les objets de la base OSM correspondant à une clef particulière (se référer à la [documentation d'OSM ](https://wiki.openstreetmap.org/wiki/FR:%C3%89l%C3%A9ments_cartographiques) pour choisir les clefs).

Nous nous intéressons ici à l'ensemble des équipements (clef **amenity**) enregistrés dans la base OSM sous forme de points en Andorre. 

```{r}
library(osmextract)
osm_pt <- oe_get(place = "Andorra",      
                 layer = "points", 
                 extra_tags = "amenity", 
                 quiet = TRUE)
```

Des équipements de nature très variés sont saisis dans OSM: 

```{r}
unique(osm_pt$amenity)
```

Nous allons maintenant sélectionner les bars, cafés, pubs et restaurants et les visualiser sur une carte interactive. 

```{r}
poi <- c("bar", "cafe", "pub", "restaurant")
osm_pt <- osm_pt[osm_pt$amenity %in% poi, ]

library(leaflet)

pal <- colorFactor(palette = c("navy", "red", "darkgreen", "gold"),
                   domain = poi)

leaflet(osm_pt) |>
  addProviderTiles("OpenStreetMap.HOT") |>
  addCircleMarkers(radius = 4,
                   stroke = FALSE,
                   color = ~ pal(amenity),
                   fillOpacity = 1,
                   popup = osm_pt$name) |>
  addLegend(pal = pal,
            values = poi,
            opacity = 0.7,
            title = "OSM amenity",
            position = "bottomright"
  ) 
```









:::{.callout-note}
## Site web d'`osmextract`
[osmextract](https://docs.ropensci.org/osmextract/)
:::