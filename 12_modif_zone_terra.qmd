---
cache: false
---

# Modifications de la zone d'étude 

## Projections {#sec-proj}

Pour modifier le système de projection d'un raster, nous pouvons utiliser la fonction `project()`. Il est alors nécessaire de **fournir un modèle** et d'indiquer la **méthode d'estimation** des nouvelles valeurs des cellules.

Le modèle est un nouveau raster sur lequel aligner/projeter les données. 
Pour construire un modèle, nous utilisons dans un premier temps la fonction `project(x, crs)`.
Cette fonction va produire un raster avec une résolution choisie automatiquement. Nous utilisons ensuite la fonction `res()` (ou `dim()`) pour ajuster la résolution de ce raster modèle (voir `?project`). La fonction `project()` peut ensuite être réutilisée pour projeter les valeurs dans le modèle, en précisant la méthode d'estimation à utiliser. 

Quatre méthodes d'estimation sont disponibles :   

- ***near*** : plus proche voisin. Méthode rapide et par défaut pour les données qualitatives;     
- ***bilinear*** : interpolation bilinéaire.  Méthode par défaut pour les données quantitatives;      
- ***cubic*** : interpolation cubique;     
- ***cubicspline*** : interpolation cubique spline.    

```{r reproj_raster}
#| layout-ncol: 2
library(terra)
elev_raw <- rast("data/elevation.tif") 
clc_raw <- rast("data/clc_2018.tif")

# Création d'un modèle de raster en 2154
model_proj <- project(x = elev_raw, y = "EPSG:2154")

# Ajustement de la résolution du modèle (100 m)
res(model_proj) <- 100

# Projection dans le modèle
elev <- project(x = elev_raw, y = model_proj, method = "bilinear")
clc <- project(x = clc_raw, y = model_proj, method = "near")

plot(elev, main = "Altitudes - RGF93 v1 / Lambert-93" )
plot(clc, type = "classes",  main = "CLC - RGF93 v1 / Lambert-93")
```

Pour sauvegarder les rasters reprojetés :

```{r save_rast_proj}
#| eval: false
writeRaster(elev, filename = "data/elev.tif")
writeRaster(clc, filename = "data/clc.tif")
```


## Crop {#sec-crop}

Le découpage d'un raster en fonction de l'étendue d'un autre objet, `SpatVector` ou `SpatRaster`, est réalisable avec la fonction `crop()`.

::: {layout="[[1,1]]"}
![@RasterCheatSheet](img/crop.png)

![](img/crop2.png)
:::

Import de données vectorielles (découpages communaux) avec la fonction `vect` du package `terra`. Ces données seront stockées dans un objet `SpatVector`.
```{r crop_raster}
commune <- vect("data/lot.gpkg", layer="communes")
```

Extraction des limites communales de Cahors (code INSEE = 46042).
```{r crop_raster_1}
cahors <- subset(commune, commune$INSEE_COM == "46042") 
```


Pour utiliser la fonction `crop()`, les deux couches de données doivent être dans la même projection. 
```{r crop_raster_3}
crop_cahors <- crop(elev, cahors)

plot(crop_cahors)
plot(cahors, add = TRUE)
```

## Mask

Pour afficher uniquement les valeurs d'un raster contenu dans un polygone, utilisez la fonction `mask()`.

Création d'un masque sur le raster **crop_cahors** en fonction des limites communales (polygone) de **cahors** :
```{r mask_raster, eval=TRUE, fig.align='center', fig.width=6}
mask_cahors <- mask(crop_cahors, cahors)

plot(mask_cahors)
```



::: {.callout-note}
## Mask vs. Crop
**Masquer** un raster (**mask**) signifie remplacer les valeurs de pixels en dehors d'une zone d'intérêt en NA. Les dimensions du raster ne sont pas modifiées.   
**Recadrer** un raster (**crop**) signifie supprimer les lignes et/ou les colonnes qui se trouvent en dehors d'une zone d'intéret. Les dimensions du raster sont modifiées.
:::


## Agrégation & désagrégation

::: {layout="[[-0.5, 1, -0.5], [1,1]]"}
![](img/raster.png)

![@RasterCheatSheet](img/agr_raster.png)

![](img/agr_raster_2.png)
:::

Le ré-échantillonnage d'un raster dans une résolution différente se fait en plusieurs étapes.

1. Afficher la résolution d'un raster avec la fonction `res()`.
```{r agr_raster}
res(elev) 
```

2. Créer une grille de même étendue, puis en diminuer la résolution spatiale (plus grosses cellules).
```{r agr_raster_1}

elev_lower_model  <- elev

# Tailles des cellules = 1000 mètres
res(elev_lower_model) <- 1000

elev_lower_model
```

3. La fonction `resample()` permet de ré-échantillonner les valeurs de départ dans la nouvelle résolution spatiale. Plusieurs méthodes de ré-échantillonnage sont disponibles (voir @sec-proj).
```{r agr_raster_2}
elev_lower <- resample(x = elev,
                       y = elev_lower_model, 
                       method = "bilinear") 

plot(elev_lower, 
     main = "cellsize = 1000m - ré-échantillonnage bilinéaire")
```


## Fusion de raster

Il est possible de fusionner plusieurs objets `SpatRaster` en un seul avec `merge()` ou `mosaic()`.

![[Site web ESRI](https://desktop.arcgis.com/fr/arcmap/10.3/manage-data/raster-and-images/what-is-a-mosaic.htm)](img/mosaic.png)

Après un découpage du raster d'élévation par la limite communale de Cahors (voir @sec-crop), nous réalisons la même chose pour la commune limitrophe de Bellefont-La Rauze.

```{r merge_raster}
# Extraction des limites communales de Bellefont-La Rauze
bellefont <- subset(commune, commune$INSEE_COM == "46156") 

# Découpage du raster d'élévation en fonction des limites de Bellefont-La Rauze
crop_bellefont <- crop(elev, bellefont)
```

Les rasters d'élévation **crop_cahors** et **crop_bellefont** se chevauchent spatialement :

```{r merge_raster_1}
#| layout-ncol: 2
plot(crop_cahors, main = "Crop Cahors")
plot(cahors, add = TRUE)
plot(bellefont, add = TRUE)
plot(crop_bellefont, main = "Crop Bellefont-La Rauze")
plot(bellefont, add = TRUE)
plot(cahors, add = TRUE)
```

La différence entre les fonctions `merge()` ou `mosaic()` concerne les valeurs des cellules qui se superposent. La fonction `mosaic()` calcule la valeur moyenne tandis que `merge()` conserve la valeur du premier objet `SpatRaster` appelé dans la fonction.

```{r merge_raster_2}
# Dans cet exemple, merge() et mosaic() donnent le même résultat
merge_raster <- merge(crop_cahors, crop_bellefont)
mosaic_raster <- mosaic(crop_cahors, crop_bellefont)

plot(merge_raster)
plot(bellefont, add = TRUE)
plot(cahors, add = TRUE)
```


## Segregate

La fonction `segregate()`permet de décomposer un raster par valeur (ou modalité) en différentes couches matricielles.

```{r segregate}
clc_by_class <- segregate(clc, keep = TRUE, other = NA)

plot(clc_by_class)
```
